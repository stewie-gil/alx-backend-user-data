#!/usr/bin/env python3
""" this module contains BasicAuth which
inherits from Auth
"""

from api.v1.auth.auth import Auth
import base64
from typing import TypeVar
from models.user import User


class BasicAuth(Auth):
    """ inherits from auth"""

    def extract_base64_authorization_header(
            self, authorization_header: str) -> str:
        """
        Extract and return the Base64 part of the
        Authorization header for Basic Authentication.

        Args:
            authorization_header (str): The Authorization header string.

        Returns:
            str: The Base64 part of the
        Authorization header, or None if not valid.
        """
        if authorization_header is None:
            return None
        elif not isinstance(authorization_header, str):
            return None
        if not authorization_header.startswith("Basic "):
            return None

        base64_credentials = authorization_header[6:]
        return base64_credentials

    def decode_base64_authorization_header(
            self, base64_authorization_header: str) -> str:
        """
         returns the decoded value of a Base64
        string base64_authorization_header
        """
        if base64_authorization_header is None:
            return None
        elif not isinstance(base64_authorization_header, str):
            return None

        try:
            decoded = base64.b64decode(base64_authorization_header)
            return decoded.decode('utf-8')
        except base64.binascii.Error:
            return None

    def extract_user_credentials(
            self, decoded_base64_authorization_header: str) -> (str, str):
        """returns the user email and password from
        the Base64 decoded value"""
        if decoded_base64_authorization_header is None:
            return None, None
        if not isinstance(decoded_base64_authorization_header, str):
            return None, None
        if ':' not in decoded_base64_authorization_header:
            return None, None

        email, password = decoded_base64_authorization_header.split(':', 1)
        return email, password

    def user_object_from_credentials(
            self, user_email: str, user_pwd: str) -> TypeVar('User'):
        """Returns User instance based on his email and password"""
        if user_email is None or not isinstance(user_email, str):
            return None
        if user_pwd is None or not isinstance(user_email, str):
            return None
        try:
            users = User.search({"email": user_email})

            if not users or users == []:
                return None
            for user in Users:
                if user.is_valid_password(user_pwd):
                    return user
        except Exception as e:
            return None

    def current_user(self, request=None) -> TypeVar('User'):
        """overloads Auth and retrieves the user instance for a request"""
        header = self.authorization_header(request)
        auth_token = self.extract_base64_authorization_header(header)
        auth_tokenn = self.decode_base64_authorization_header(auth_token)
        email, password = self.extract_user_credentials(auth_tokenn)
        return self.user_object_from_credentials(email, password)

